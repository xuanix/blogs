I"š<h2 id="1-list-comprehension">1 List Comprehension</h2>

<p>A <strong>list comprehension</strong> is a compact way to create a list whose elements are the results of
applying a fixed expression to elements in another sequence.</p>

<p><code>[&lt;map exp&gt; for &lt;name&gt; in &lt;iter exp&gt; if &lt;filter exp&gt;]</code></p>

<h3 id="11-questions">1.1 Questions</h3>

<ol>
<li>What would Python print?</li>
<pre><code>
&gt;&gt;&gt; [i + 1 for i in [1, 2, 3, 4, 5] if i % 2 == 0]
[3, 5]
&gt;&gt;&gt; [i * i for i in [5, -1, 3, -1, 3] if i &gt; 2]
[25, 9, 9]
&gt;&gt;&gt; [[y * 2 for y in [x, x + 1]] for x in [1, 2, 3, 4]]
[[2, 4], [4, 6], [6, 8], [8, 10]]
</code></pre>

<li>Define a function <code>foo</code> that takes in a list <code>lst</code> and returns a new list that keeps only the even-indexed elements of <code>lst</code> and multiples each of those elements by the corresponding
index.</li>

<pre><code>
def foo(lst):
    """
    &gt;&gt;&gt; x = [1, 2, 3, 4, 5, 6]
    &gt;&gt;&gt; foo(x)
    [0, 6, 20]
    """
    return [lst[i]*i for i in range(len(lst)) if i % 2]
</code></pre>
</ol>
<p><br /></p>

<h2 id="2-tree">2 Tree</h2>

<h3 id="21-implementation">2.1 Implementation</h3>
<pre><code>def tree(value, branches=[]):
    for branch in branches:
        assert is_tree(branch), 'branches must be trees'
    return [value] + list(branches)

# Selectors
def root(tree):
    return tree[0]

def branches(tree):
    return tree[1:]

def is_leaf(tree):
    return not branches(tree) # empty is False

def is_tree(tree):
    if type(tree) != list or len(tree) &lt; 1:
        return False
    for branch in branches(tree):
        if not is_tree(branch):
            return False
    return True

t = tree(1, 
            [tree(3,
                [tree(4),
                 tree(5),
                 tree(6)]),
             tree(2)])
</code></pre>

<h3 id="22-questions">2.2 Questions</h3>
<ol>
<li>Define a function <code>square_tree(t)</code> that squares every item in the tree <code>t</code>. It should
return a new tree. You can assume that every item is a number.</li>
<pre><code>def square_tree(t):
    sq_branches = [square_tree(branch) for branch in branches(t)]
    return tree(root(t)**2, sq_branches)
</code></pre>
<li>Define a function <code>height(t)</code> that returns the height of a tree. Recall that the height of a tree is the length of the longest path from the root to a leaf.</li>
<pre><code>def height(t):
    if is_leaf(t):
        return 0
    return 1+ max([height(branch) for branch in branches(t)])
</code></pre>

<li>Define a function <code>tree_size(t)</code> that returns the number of nodes in a tree.</li>
<pre><code>def tree_size(t):
    if is_leaf(t):
        return 1
    return 1 + sum([tree_size(branch) for branch in branches(t)])
</code></pre>

<li>Define a function <code>tree_max(t)</code> that returns the largest number in a tree.</li>
<pre><code>def tree_max(t):
    if is_leaf(t):
        return root(t)
    return max([root(t)]+[tree_max(branch) for branch in branches(t)])
</code></pre>
</ol>

<h3 id="23-extra-questions">2.3 Extra Questions</h3>
<ol>
<li>Expression tree</li>
<pre><code>def reduce(fn, s, init):
    reduced = init
    for x in s:
        reduced = fn(reduced, x)
    return reduced

def apply_to_all(fn, s):
    return [fn(x) for x in s]
</code></pre>

<pre><code>from operator import add, mul
def eval_tree(tree):
    """Evaluates an expression tree with functions as root
    &gt;&gt;&gt; eval_tree(tree(1))
    1
    &gt;&gt;&gt; expr = tree(mul, [tree(2), tree(3)])
    &gt;&gt;&gt; eval_tree(expr)
    6
    &gt;&gt;&gt; eval_tree(tree(add, [expr, tree(4)]))
    10
    """
    if is_leaf(tree):
        return root(tree)
    func, subtrees = root(tree), branches(tree)
    init = 0 if func == add else 1
    return reduce(func, apply_to_all(eval_tree, subtrees), init)

</code></pre>

<li>Represent the hailstone sequence as a tree</li>
<pre><code>def hailstone_tree(n, h):
    """Generates a tree of hailstone numbers that will reach N
    , with height H.
    &gt;&gt;&gt; hailstone_tree(1, 0)
    [1]
    &gt;&gt;&gt; hailstone_tree(1, 4)
    [1, [2, [4, [8, [16]]]]]
    &gt;&gt;&gt; hailstone_tree(8, 3)
    [8, [16, [32, [64]], [5, [10]]]]
    """
    if h == 0:
        return tree(n)
    branches = [hailstone_tree(2*n, h-1)]
    if (n-1) % 3 == 0 and (n-1) // 3 &gt;1:
        branches += [hailstone_tree((n-1)//3, h-1)]
    return tree(n, branches)
</code></pre>
<li>Define the procedure <code>find_path(tree, x)</code> that, given a rooted tree <code>tree</code> and a value <code>x</code>, returns a list containing the nodes along the path required to get from the root of <code>tree</code> to a node <code>x</code>.</li>
<pre><code>def find_path(tree, x):
    """ Return a path in a tree to a leaf with value X,
    None if such a leaf is not present.
    &gt;&gt;&gt; t = tree(2, [tree(7, [tree(3), tree(6, [tree(5), tree(11)])]), tree(15)])
    &gt;&gt;&gt; find_path(t, 5)
    [2, 7, 6, 5]
    &gt;&gt;&gt; find_path(t, 6)
    [2, 7, 6]
    &gt;&gt;&gt; find_path(t, 10)
    """

    if root(tree) == x:
        return [x]
    for path in [find_path(branch, x) for branch in branches(tree)]:
        if path:
            return [root(tree)] + path</code></pre>
</ol>
:ET