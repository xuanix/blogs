---
layout:     post
title: "CS61A-Extra Homework 1"
subtitle:   "Newton's Method"
author: "Tianxiang Gao"
date: "May 7, 2015"
header-img: "img/post-bg-02.jpg"
---
Newton's method quickly finds accurate approximations to *zeros* of differentiable function. In another word, finds $x_0$ in $f(x)$ such that $f(x_0)=0$, where $x_0$ is known as **zero** of $f(x)$. 

<img src="{{site.baseurl}}/img/cs61a/newton.png">

Given a function $f$ and initial *guess* x, improve current $x$ by using slop (derivative) $f^\prime (x)$. Based on the current length $-f(x)$ from $0$, the $x$ need to change $\frac{f(x)}{f^\prime (x)}$ according to $tan(\alpha)$. So x can be updated by 

$$x = x-\frac{f(x)}{f^\prime (x)}$$

<pre><code>def improve(update, close, guess=1, max_updates=100):
    """Iteratively improve guess with update until close(guess) is true."""
    k = 0
    while not close(guess) and k < max_updates:
        guess = update(guess)
        k = k + 1
    return guess

def approx_eq(x, y, tolerance=1e-15):
    """Whether x is within tolerance of y."""
    return abs(x - y) < tolerance

def find_zero(f, df):
    """Return a zero of the function f with derivative df."""
    def near_zero(x):
        return approx_eq(f(x), 0)
    return improve(newton_update(f, df), near_zero)

def newton_update(f, df):
    """Return an update function for f with derivative df."""
    def update(x):
        return x - f(x) / df(x)
    return update

def nth_root_of_a(n, a):
    """Return the nth root of a.

    >>> nth_root_of_a(2, 64)
    8.0
    >>> nth_root_of_a(3, 64)
    4.0
    >>> nth_root_of_a(6, 64)
    2.0
    """
    return find_zero(lambda x: pow(x, n) - a, lambda x: n * pow(x, n-1))

</code></pre>

<h3>Question 1</h3>
<p>Implement <code>intersect</code>, which takes two functions <code>f</code> and <code>g</code> and their
derivatives <code>df</code> and <code>dg</code>. It returns an intersection point <code>x</code>, at which
<code>f(x)</code> is equal to <code>g(x)</code>.</p>
<pre><code>def intersect(f, df, g, dg):
    """Return where f with derivative df intersects g with derivative dg.

    >>> parabola, line = lambda x: x*x - 2, lambda x: x + 10
    >>> dp, dl = lambda x: 2*x, lambda x: 1
    >>> intersect(parabola, dp, line, dl)
    4.0
    """
    return find_zero(lambda x: f(x) - g(x), lambda x: df(x) - dg(x))

</code></pre>

<h3>Question 2</h3>
<p>Differentiation of polynomials can be performed automatically by applying the
<a href="http://en.wikipedia.org/wiki/Product_rule">product rule</a> and the fact that
the derivative of a sum is the sum of the derivatives of the terms.</p>

<p>In the following example, polynomials are expressed as two-argument Python
functions. The first argument is the input <code>x</code>. The second argument called
<code>derive</code> is <code>True</code> or <code>False</code>. When <code>derive</code> is <code>True</code>, the derivative is
returned. When <code>derive</code> is <code>False</code>, the function value is returned.</p>

<p>For example, the <code>quadratic</code> function below returns a quadratic polynomial.
The linear term <code>X</code> and constant function <code>K</code> are defined using
<a href="https://www.python.org/dev/peps/pep-0308/">conditional expressions</a>.</p>
<pre><code>X = lambda x, derive: 1 if derive else x
K = lambda k: lambda x, derive: 0 if derive else k

def quadratic(a, b, c):
    """Return a quadratic polynomial a*x*x + b*x + c.

    >>> q_and_dq = quadratic(1, 6, 8) # x*x + 6*x + 8
    >>> q_and_dq(1.0, False)  # value at 1
    15.0
    >>> q_and_dq(1.0, True)   # derivative at 1
    8.0
    >>> q_and_dq(-1.0, False) # value at -1
    3.0
    >>> q_and_dq(-1.0, True)  # derivative at -1
    4.0
    """
    A, B, C = K(a), K(b), K(c)
    AXX = mul_fns(A, mul_fns(X, X))
    BX = mul_fns(B, X)
    return add_fns(AXX, add_fns(BX, C))
</code></pre>

<p>To complete this implementation and apply Newton's method to polynomials, fill in the bodies of <code>add_fns</code>, <code>mul_fns</code>, and <code>poly_zero</code> below.</p>

<pre><code>def add_fns(f_and_df, g_and_dg):
    """Return the sum of two polynomials."""
    return lambda x, derive: f_and_df(x, derive) + g_and_dg(x, derive)

def mul_fns(f_and_df, g_and_dg):
    """Return the product of two polynomials."""
    f, df = lambda x: f_and_df(x, False), lambda x: f_and_df(x, True)
    g, dg = lambda x: g_and_dg(x, False), lambda x: g_and_dg(x, True)
    def product(x, derive):
        if derive:
            return f(x) * dg(x) + df(x) * g(x)
        else:
            return f(x) * g(x)
    return product
</code></pre>
Find the *zero* of any polynomial function.
<pre><code>
def poly_zero(f_and_df):
    """Return a zero of polynomial f_and_df, which returns:
        f(x)  for f_and_df(x, False)
        df(x) for f_and_df(x, True)

    >>> q = quadratic(1, 6, 8)
    >>> round(poly_zero(q), 5) # Round to 5 decimal places
    -2.0
    >>> round(poly_zero(quadratic(-1, -6, -9)), 5)
    -3.0
    """
    return find_zero(lambda x: f_and_df(x, False), lambda x: f_and_df(x, True))

</code></pre>