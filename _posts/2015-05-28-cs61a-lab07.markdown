---
layout:     post
title: "CS61A-Lab 7"
subtitle:   "Recursive Objects"
author: "Tianxiang Gao"
date: "May 28, 2015"
header-img: "img/post-bg-02.jpg"
---
<h1>Recursive Objects</h1>
<hr>
<h2>Linked Lists</h2>
<pre><code>class Link:
    """A linked list.

    >>> s = Link(1, Link(2, Link(3, Link(4))))
    >>> len(s)
    4
    >>> s[2]
    3
    >>> s
    Link(1, Link(2, Link(3, Link(4))))
    """
    empty = ()

    def __init__(self, first, rest=empty):
        assert rest is Link.empty or isinstance(rest, Link)
        self.first = first
        self.rest = rest

    def __getitem__(self, i):
        if i == 0:
            return self.first
        else:
            return self.rest[i-1]

    def __len__(self):
        return 1 + len(self.rest)

    def __repr__(self):
        if self.rest is not Link.empty:
            rest_str = ', ' + repr(self.rest)
        else:
            rest_str = ''
        return 'Link({0}{1})'.format(self.first, rest_str)</code></pre>
<h3>Question 1</h3>
<pre><code>>>> Link()
TypeError: __init__() missing 1 required positional argument: 'first'

>>> link = Link(1, Link(2, Link(3)))
>>> link.first
1

>>> link.rest.first
2

>>> link.rest.rest.rest is Link.empty
True

>>> link.first = 9001
>>> link.first
9001

>>> link.rest = link.rest.rest
>>> link.rest.first
3

>>> link = Link(1)
>>> link.rest = link
>>> link.rest.rest.rest.rest.first
1</code></pre>

<h3>Question 2</h3>
<pre><code>def insert(link, value, index):
    """Insert a value into a Link at the given index.

    >>> link = Link(1, Link(2, Link(3)))
    >>> insert(link, 9001, 0)
    >>> link
    Link(9001, Link(1, Link(2, Link(3))))
    >>> insert(link, 100, 2)
    >>> link
    Link(9001, Link(1, Link(100, Link(2, Link(3)))))
    >>> insert(link, 4, 5)
    Index out of bounds!
    """
    assert isinstance(link, Link)
    if index >= len(link):
        return 'Index out of bounds'
    elif index == 0:
        link.rest = Link(link.first, link.rest)
        link.first = value
    else:
        insert(link.rest, value, index-1)</code></pre>

<h2>Trees</h2>
<pre><code>class Tree:
    def __init__(self, entry, branches=()):
        self.entry = entry
        for branch in branches:
            assert isinstance(branch, Tree)
        self.branches = branches

    def __repr__(self):
        if self.branches:
            branches_str = ', ' + repr(self.branches)
        else:
            branches_str = ''
        return 'Tree({0}{1})'.format(self.entry, branches_str)

    def is_leaf(self):
        return not self.branches</code></pre>

<pre><code>>>> t = Tree(1, Tree(2))
TypeError: 'Tree' object is not iterable

>>> t = Tree(1, [Tree(2)])
>>> t.entry
1

>>> t.branches[0]
Tree(2)

>>> t.branches[0].entry
2

>>> t.entry = t.branches[0].entry
>>> t
Tree(2, [Tree(2)])

>>> t.branches.append(Tree(4, [Tree(8)]))
>>> len(t.branches)
2

>>> t.branches[0]
Tree(2)

>>> t.branches[1]
Tree(4, [Tree(8)])</code></pre>

<h3>Question 4</h3>
<pre><code>def square_tree(t):
    """Mutates a Tree t by squaring all its elements.

    >>> t = Tree(1, [Tree(3, [Tree(5)]), Tree(7)])
    >>> square_tree(t)
    >>> t
    Tree(1, [Tree(9, [Tree(25)]), Tree(49)])
    """
    t.entry = t.entry**2
    for b in t.branches:
        square_tree(b)</code></pre>

<h2>Extra Questions</h2>
<hr>
<h3>Question 5</h3>
<pre><code>def list_to_link(lst):
    """Takes a Python list and returns a Link with the same elements.

    >>> list_to_link([1, 2, 3])
    Link(1, Link(2, Link(3)))
    """
    if not lst:
        return Link.empty
    else:
        return Link(lst[0], list_to_link(lst[1:]))</code></pre>

<h3>Question 6</h3>
<pre><code>def link_to_list(link):
    """Takes a Link and returns a Python list with the same elements.

    >>> link = Link(1, Link(2, Link(3, Link(4))))
    >>> link_to_list(link)
    [1, 2, 3, 4]
    >>> link_to_list(Link.empty)
    []
    """
    if not link:
        return []
    else:
        return [link.first] + link_to_list(link.rest)</code></pre>

<h3>Question 7</h3>
<pre><code>def my_reverse(link):
    """Returns a Link that is the reverse of the original.

    >>> reverse(Link(1))
    Link(1)
    >>> link = Link(1, Link(2, Link(3)))
    >>> reverse(link)
    Link(3, Link(2, Link(1)))
    >>> link
    Link(1, Link(2, Link(3)))
    """
    lst = link_to_list(link)
    lst.reverse()
    return list_to_link(lst)</code></pre>

<h4>Extra <code>mutate_reverse(link)</code></h4>
<pre><code>def mutate_reverse(link):
    """Mutates the Link so that its elements are reversed.

    >>> link = Link(1)
    >>> mutate_reverse(link)
    >>> link
    Link(1)

    >>> link = Link(1, Link(2, Link(3)))
    >>> mutate_reverse(link)
    >>> link
    Link(3, Link(2, Link(1)))
    """
    if link and link.rest:
        mutate_reverse(link.rest)
        while link.rest:
            link.first, link.rest.first = link.rest.first, link.first
            link = link.rest</code></pre>
<h3>Question 8</h3>
<pre><code>def leaves(t):
    """Returns a list of all the entries of the leaf nodes of the Tree t.

    >>> leaves(Tree(1))
    [1]
    >>> leaves(Tree(1, [Tree(2, [Tree(3)]), Tree(4)]))
    [3, 4]
    """
    if t.is_leaf():
        return [t.entry]
    else:
        return sum([leaves(b) for b in t.branches], [])</code></pre>

<h3>Question 9</h3>
<pre><code>def cumulative_sum(t):
    """Return a new Tree, where each entry is the sum of all entries in the
    corresponding subtree of t.

    >>> t = Tree(1, [Tree(3, [Tree(5)]), Tree(7)])
    >>> cumulative = cumulative_sum(t)
    >>> t
    Tree(1, [Tree(3, [Tree(5)]), Tree(7)])
    >>> cumulative
    Tree(16, [Tree(8, [Tree(5)]), Tree(7)])
    >>> cumulative_sum(Tree(1))
    Tree(1)
    """
    if t.is_leaf():
        return Tree(t.entry)
    else:
        cumulative_branches = [cumulative_sum(b) for b in t.branches]
        entry = sum([b.entry for b in cumulative_branches]) + t.entry
        return Tree(entry, cumulative_branches)</code></pre>

<h3>Question 10</h3>
<pre><code>def same_shape(t1, t2):
    """Returns whether two Trees t1, t2 have the same shape. Two trees have the
    same shape if they have the same number of branches and each of their
    children have the same shape.

    >>> t, s = Tree(1), Tree(3)
    >>> same_shape(t, t)
    True
    >>> same_shape(t, s)
    True
    >>> t = Tree(1, [Tree(2), Tree(3)])
    >>> same_shape(t, s)
    False
    >>> s = cumulative_sum(t)
    >>> same_shape(t, s)
    True
    """
    return len(t1.branches)==len(t2.branches) and \
           all(same_shape(b1, b2) for b1, b2 in zip(t1.branches, t2.branches))
</code></pre>

<h2>Folding Linked Lists</h2>
**recursive list**
<code>Link(1, Link(2, Link(3, Link(4,Link(5)))))</code>
**right fold**, where <code>z</code> is initial value
<code>f(1, f(2, f(3, f(4, f(5, z)))))</code>
**left fold**, which is equivalent to <code>reduce</code>
<code>f(f(f(f(f(z, 1), 2), 3), 4), 5)</code>

<h3>Question 11</h3>
<pre><code>def foldl(link, fn, z):
    """ Left fold
    >>> lst = Link(3, Link(2, Link(1)))
    >>> foldl(lst, sub, 0) # (((0 - 3) - 2) - 1)
    -6
    >>> foldl(lst, add, 0) # (((0 + 3) + 2) + 1)
    6
    >>> foldl(lst, mul, 1) # (((1 * 3) * 2) * 1)
    6
    """
    if link is Link.empty:
        return z
    return foldl(link.rest, fn, fn(z, link.first))</code></pre>

<h3>Question 12</h3>
<pre><code>def foldr(link, fn, z):
    """ Right fold
    >>> lst = Link(3, Link(2, Link(1)))
    >>> foldr(lst, sub, 0) # (3 - (2 - (1 - 0)))
    2
    >>> foldr(lst, add, 0) # (3 + (2 + (1 + 0)))
    6
    >>> foldr(lst, mul, 1) # (3 * (2 * (1 * 1)))
    6
    """
    if link is Link.empty:
        return z
    return fn(link.first, foldr(link.rest, fn, z))</code></pre>
