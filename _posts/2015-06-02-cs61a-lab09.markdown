---
layout:     post
title: "CS61A-Lab 9"
subtitle:   "Scheme"
author: "Tianxiang Gao"
date: "Jun 03, 2015"
header-img: "img/post-bg-02.jpg"
---
<h2>Basics</h2>
<hr>
<code>Question 1: Primitives</code>
<pre><code>scm> 1          ; Anything following a ';' is a comment
1
scm> 1.0
1.0
scm> -27
-27
scm> #t
True
scm> #f
False
scm> "A string"
"A string"
scm> 'symbol
symbol
scm> nil
()
scm> 
</code></pre>

<h3>Question 2; Expressions</h3>
Scheme uses Polish *prefix* notation, where operator comes before the operands.

<pre><code>scm> (+ 3 5)
8

scm> (- 10 4)
4

scm> (* 7 6)
42

scm> (/ 28 2)
14

scm> (+ 1 2 3 4 5 6 7 8 9)
45

scm> (quotient 29 5)
5

scm> (remainder 29 5)
4</code></pre>

<pre><code>scm> (= 1 3)
False

scm> (> 1 3)
False

scm> (< 1 3)
True

scm> (or #t #f)
True

scm> (and #t #t)
True

scm> (and #t #f (/ 1 0))        ; Short-Circuiting
False

scm> (not #t)
False</code></pre>

<pre><code>scm> (define x 3)               ; Defining Variables
x

scm> x
3

scm> (define y (+ x 4))
y

scm> y
7</code></pre>

<h2>Defining functions</h2>
<pre><code>(define (&lt;name> &lt;args>) &lt;body>)</code></pre>

<pre><code>(define (cube x)
  (* x x x)
)</code></pre>

<h2>Control structures</h2>
<hr>
<pre><code>(if &lt;condition>
    &lt;true_result>
    &lt;false_result>
    )</code></pre>

<pre><code>; Scheme
(if (< x 0)
    'negative           ; returns the symbol negative
    (if (= x 0)
        'zero           ; returns the symbol zero
        'positive       ; returns the symbol positive
    )
)

# Python Equivalent
if x < 0:
    print('negative')
else:
    if x == 0:
        print('zero')
    else:
        print('positive')</code></pre>   

<h3>Qustion 4: Over or under</h3>
<pre><code>(define (over-or-under x y)
    (if (< x y) 
         -1
         ((if (= x y) 
            0
            1))
)</code></pre>

<h3>Using Conditionals</h3> 
<pre><code>(cond (&lt;condition_1> &lt;result_1>)
      (&lt;condition_2> &lt;result_2>)
        ...
      (&lt;ondition_n> &lt;result_n]>)
      (else &lt;result_else>))                ; 'else' is optional</code></pre>

<pre><code>(cond ((and (> x 0) (= (modulo x 2) 0)) 'positive-even-integer)
      ((and (> x 0) (= (modulo x 2) 1)) 'positive-odd-integer)
      ((= x 0) 'zero)
      ((and (< x 0) (= (modulo x 2) 0)) 'negative-even-integer)
      ((and (< x 0) (= (modulo x 2) 1)) 'negative-odd-integer))</code></pre>

<h2>Lambdas</h2>
Defines a procedure in Scheme.
<pre><code>(define (&lt;name> &lt;args>) &lt;body>)
</code></pre>

Define a <code>lambda</code> in Scheme.
<pre><code>(lambda (&lt;args>) &lt;body>)</code></pre>

<pre><code>; defining a lambda
(lambda (x) (+ x 3))
; calling a lambda
((lambda (x) (+ x 3)) 7)
</code></pre>

<h3>Qustion 5: make-adder</h3>
<pre><code>(define (make-adder num)
  (lambda (x) (+ x num))
)</code></pre>

<h2>Lists</h2>
<pre><code>scm> (define a '(1 2 3 4))
a

scm> (define b '(4 5 6))
b

scm> (define empty '())
empty

scm> (append '(1 2 3) '(4 5 6))
(1 2 3 4 5 6)

scm> (length '(1 2 3 4 5))
5

scm> (null? '(1 2 3))             ; Checks whether list is empty.
False

scm> (null? '())
True

scm> (null? nil)
True</code></pre>

<h3>Question 6</h3>
<pre><code>(define structure
  (cons (cons 1 nil) 
        (cons 2 
              (cons (cons 3 4 ) 
                    (cons 5 nil))))
)</code></pre>

<h3>Question 7: Remove</h3>
<pre><code>(define (remove item lst)
  (cond ((null? lst) '())
        ((= (car lst) item) (remove item (cdr lst)))
        (else (cons (car lst) (remove item (cdr lst))))
    )
)</code></pre>

<h2>Extra Questions</h2>
<hr>
<h3>Question 8: Composed</h3>
<pre><code>(define (composed f g)
  (lambda (x) (f (g x)))
)</code></pre>

<h3>Question 9: Greatest common divisor</h3>
<pre><code>(define (max a b) (if (> a b) a b))
(define (min a b) (if (> a b) b a))
(define (gcd a b)
    (if (or (= a 0) (= b 0))
        (max a b)
      (if (= (modulo (max a b) (min a b)) 0) 
        (min a b)
        (gcd (min a b) (remainder (max a b) (min a b)))
        )
    )
)</code></pre>

<h3>Question 10: Filter</h3>
<pre><code>(define (filter f lst)
  (cond ((null? lst) lst)
        ((f (car lst)) (cons (car lst) (filter f (cdr lst))))
        (else (filter f (cdr lst)))

    )
)</code></pre>

<h3>Question 11: all-satisfies</h3>
<pre><code>(define (all-satisfies lst pred)
  (= (length lst) (length (filter pred lst)))
)</code></pre>

<h3>Question 12: Accumulate</h3>
<pre><code>(define (accumulate combiner start n term)
  (if (= n 0)
      start
      (combiner (term n) (accumulate combiner start (- n 1) term))
      ))</code></pre>