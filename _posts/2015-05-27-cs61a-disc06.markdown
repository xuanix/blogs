---
layout:     post
title: "CS61A-Discussion 06"
subtitle:   "OBJECT-ORIENTED PROGRAMMING AND
INTERFACES"
author: "Tianxiang Gao"
date: "May 27, 2015"
header-img: "img/post-bg-02.jpg"
---

<h2>1 Introduction</h2> 
Terminology: class, instance, methods, attributes, class attribute, instance attribute.

<h3>1.1 Defining a Class</h3>
**Syntax**
<pre><code>class OurClass(ParentClass):
    """Class definition with methods and class attributes"""
</code></pre>

<h3>1.2 Defning a Method</h3>
<pre><code>class OurClass(ParentClass):
    def method(self, arg):
        # body goes here
</code></pre>

<h3>1.3 Using a Class and Its Attributes</h3>
<pre><code>class OurClass(ParentClass):
    bar = "Fruit Bar" # class attribute
    def __init__(self, bar_name):
        self.bar = bar_name # instance attribute
    def method(self, arg):
        # body goes here
</code></pre>
<pre><code>>>> new_bar = OurClass('Crazy Bar')
>>> new_bar.bar
'Crazy Bar'
</code></pre>

<h3>1.4 Class vs. Object</h3>
Instantiation of a **class** is an **object**.

<h2>2 Taste the Rainbow</h2>
<pre><code>class Skittle:
    """A Skittle object has a color to describe it."""
    def __init__(self, color):
        self.color = color

class Bag:
    """A Bag is a collection of Skittles. All bags share the number of bags ever made (sold) and each bag keeps track of its Skittles in a list."""
    number_sold = 0

    def __init__(self):
        self.skittles = []
        Bag.number_sold += 1

    def tag_line(self):
        """Print the Skittles tag line."""
        print("Taste the rainbow!")

    def print_bag(self):
        print([s.color for s in self.skittles])

    def take_skittle(self):
        """Take the first skittle in the bag (from the front of the skittles list)."""
        return self.skittles.pop(0)

    def add_skittle(self, s):
        """Add a skittle to the bag."""
        self.skittles.append(s)</code></pre>

<h3>2.1 Questions</h3>
<ol>
<li>What does Python print for each of the following:</li>
<pre><code>>>> johns_bag = Bag()
>>> johns_bag.print_bag()
[]
>>> for color in ['blue', 'red', 'green', 'red']:
...     johns_bag.add_skittle(Skittle(color))
... 
>>> johns_bag.print_bag()
['blue', 'red', 'green', 'red']
>>> s = johns_bag.take_skittle()
>>> print(s.color)
blue
>>> johns_bag.number_sold
1

>>> soumyas_bag = Bag()
>>> soumyas_bag.print_bag()
[]

>>> johns_bag.print_bag()
['red', 'green', 'red']

>>> Bag.number_sold
2
>>> soumyas_bag.number_sold
2
</code></pre>

<li><code>take_color</code></li>
<pre><code>def take_color(self, color):
    for i in range(len(self.skittles)):
        if color == self.skittles[i].color:
            return self.skittles.pop(i)</code></pre>

<li><code>take_all</code></li>
<pre><code>def take_all(self):
        for _ in range(len(self.skittles)):
            print(self.take_skittle().color)</code></pre>
</ol>

<h2>3 Inheritance</h2>
<h3>3.1 When should we use inheritance?</h3>
<pre><code>class Pet(object):
    """docstring for Pet"""
    def __init__(self, name, owner):
        self.is_alive = True
        self.name = name
        self.owner = owner
    def eat(self, thing):
        print(self.name + " ate a " + str(thing) + "!")
    def talk(self):
        print('...')    

class Dog(Pet):
    def __init__(self, name, owner, color):
        Pet.__init__(self, name, owner)
        self.color = color
    def eat(self, thing):
        print(self.name + " ate a " + str(thing) + "!")
    def talk(self):
        print('woof!')</code></pre>

<h3>3.2 Questions</h3>
<ol>
<li><code>Cat</code></li>
<pre><code>class Cat(Pet):
    def __init__(self, name, owner, lives=9):
        Pet.__init__(self, name, owner)
        self.lives = lives  
    def talk(self):
        """A cat says meow! when asked to talk."""
        print('meow!')
    def lose_life(self):
        """A cat can only lose a life if they have at least
        one life. When lives reach zero, the ’is_alive’
        variable becomes False.
        """
        if self.is_alive:
            self.lives -= 1
        if self.lives < 1:
            self.is_alive = False
            print(self.name + ' is dead!')</code></pre>
<li>What would Python output?</li>
<pre><code>class Foo(object):
    """docstring for Foo"""
    def __init__(self, a):
        self.a = a
    def garply(self):
        return self.baz(self.a)

class Bar(Foo):
    """docstring for Bar"""
    a = 1
    def baz(self, val):
        return val

>>> f = Foo(4)
>>> b = Bar(3)
>>> f.a
4
>>> b.a
3
>>> f.garply()
AttributeError: 'Foo' object has no attribute 'baz'
>>> b.garply()
3
>>> b.a = 9
>>> b.garply()
9
>>> f.baz = lambda val: val * val
>>> f.garply()
16
</code></pre>
</ol>

<h3>3.3 Extra Questions</h3>
<ol>
<li>class <code>NoisyCat</code></li>
<pre><code>class NoisyCat(Cat):
    """A Cat that repeats things twice."""
    def talk(self):
        """Repeat what a Cat says twice."""
        Cat.talk(self)
        Cat.talk(self)</code></pre>
</ol>

<h2>Interfaces</h2>
In computer Science, an **interface** is a shared set of attributes, along with a specification of the attributes' behavior. 
<h3>4.1 Interfaces in Python</h3>
Python defines many interfaces that can be implemented by user-defined classes. For example, the interface for *arithmetic* consists of the following methods:

* <code>def __add__(self, other):</code> Allows objects to do <code>self + other</code>.
* <code>def __sub__(self, other):</code> Allows objects to do <code>self - other</code>.
* <code>def __mul__(self, other):</code> Allows objects to do <code>self * other</code>.

In addition there is also an interface for sequences:

* <code>def __len__(self, other):</code> Allows objects to do <code>len(self)</code>.
* <code>def __getitem__(self, index):</code> Allows objects to do <code>self[i]</code>.

<h3>4.2 Questions</h3>
<pre><code>class Vector:
    def __init__(self, vector):
        self.vector = vector

    def __neg__ (self) : 
        return Vector([-i for i in self.vector])
    def __add__ (self, other): 
        assert type(other) == Vector, "Invalid operation!"
        assert len(self) == len(other), "Invalid dimensions!"
        return Vector([self[n] + other[n] for n in range(len(self))])
    def __sub__ (self, other): 
        return self.__add__(-other)
    def __mul__ (self, other): 
        if type(other) == int or type(other) == float:
            return Vector([v*other for v in self.vector])
        elif type(other) == Vector:
            assert len(self) == len(other), "Invalid dimensions!"
            return sum([self[i] * other[i] for i in range(len(self))])
    def __rmul__(self, other): 
        return self.__mul__(other)
    def __len__(self) : 
        return len(self.vector)
    def __getitem__(self, n) : 
        return self.vector[n]
    def __repr__(self):
        return 'Vector({})'.format(self.vector)</code></pre>
<ol>
<li><code>__neg__</code></li>
<pre><code> def __neg__ (self) : return Vector([-i for i in self.vector])
</code></pre>
<li><code>__mul__</code></li>
<pre><code>def __mul__ (self, other): 
        if type(other) == int or type(other) == float:
            return Vector([v*other for v in self.vector])
        elif type(other) == Vector:
            assert len(self) == len(other), "Invalid dimensions!"
            return sum([self[i] * other[i] for i in range(len(self))])
</code></pre>
</ol>








