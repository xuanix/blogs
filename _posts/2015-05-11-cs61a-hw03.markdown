---
layout:     post
title: "CS61A-Homework 3"
subtitle:   "Section 1.7"
author: "Tianxiang Gao"
date: "May 11, 2015"
header-img: "img/post-bg-02.jpg"
---
<h3>Question 1</h3>
<p>A mathematical function <code>G</code> on positive integers is defined by two
cases:</p>

<pre><code>def g(n):
    """Return the value of G(n), computed recursively.

    &gt;&gt;&gt; g(1)
    1
    &gt;&gt;&gt; g(2)
    2
    &gt;&gt;&gt; g(3)
    3
    &gt;&gt;&gt; g(4)
    10
    &gt;&gt;&gt; g(5)
    22
    """
    if n <= 3:
        return n
    return g(n - 1) + 2 * g(n - 2) + 3 * g(n - 3)

def g_iter(n):
    """Return the value of G(n), computed iteratively.

    &gt;&gt;&gt; g_iter(1)
    1
    &gt;&gt;&gt; g_iter(2)
    2
    &gt;&gt;&gt; g_iter(3)
    3
    &gt;&gt;&gt; g_iter(4)
    10
    &gt;&gt;&gt; g_iter(5)
    22
    """
    if n <= 3:
        return n
    a, b, c = 1, 2, 3
    while n > 3:
        a, b, c = b, c, c + 2*b + 3*a
        n -= 1
    return c
</code></pre>

<h3>Question 2</h3>

<p>Write a function <code>has_seven</code> that takes a positive integer <code>n</code> and
returns whether <code>n</code> contains the digit 7.  <em>Do not use any assignment
statements - use recursion instead</em>:</p>

<pre><code>def has_seven(k):
    """Returns True if at least one of the digits of k is a 7, False otherwise.

    &gt;&gt;&gt; has_seven(3)
    False
    &gt;&gt;&gt; has_seven(7)
    True
    &gt;&gt;&gt; has_seven(2734)
    True
    &gt;&gt;&gt; has_seven(2634)
    False
    &gt;&gt;&gt; has_seven(734)
    True
    &gt;&gt;&gt; has_seven(7777)
    True
    """
    if k % 10 == 7:
        return True
    elif k < 10:
        return False
    return has_seven(k // 10)
</code></pre>

<h3 class="question" id="q3">Question 3</h3>

<p>The ping-pong sequence counts up starting from 1 and is always either counting
up or counting down.  At element k, the direction switches if k is a multiple
of 7 or contains the digit 7.  The first 30 elements of the ping-pong sequence
are listed below, with direction swaps marked using brackets at the 7th, 14th,
17th, 21st, 27th, and 28th elements:</p>

<pre><code>1 2 3 4 5 6 [7] 6 5 4 3 2 1 [0] 1 2 [3] 2 1 0 [-1] 0 1 2 3 4 [5] [4] 5 6</code></pre>

<p>Implement a function <code>pingpong</code> that returns the nth element of the
ping-pong sequence. <em>Do not use any assignment statements; however, you
may use <code>def</code> statements</em>.</p>

<p><em>Hint</em>: If you're stuck, try implementing <code>pingpong</code> first using
assignment and a <code>while</code> statement, then try a recursive implementation
without assignment:</p>

<pre><code>def pingpong(n):
    """Return the nth element of the ping-pong sequence.

    &gt;&gt;&gt; pingpong(7)
    7
    &gt;&gt;&gt; pingpong(8)
    6
    &gt;&gt;&gt; pingpong(15)
    1
    &gt;&gt;&gt; pingpong(21)
    -1
    &gt;&gt;&gt; pingpong(22)
    0
    &gt;&gt;&gt; pingpong(30)
    6
    &gt;&gt;&gt; pingpong(68)
    2
    &gt;&gt;&gt; pingpong(69)
    1
    &gt;&gt;&gt; pingpong(70)
    0
    &gt;&gt;&gt; pingpong(71)
    1
    &gt;&gt;&gt; pingpong(72)
    0
    &gt;&gt;&gt; pingpong(100)
    2
    """
    def pingpong_next(k, p, up):
        if k == n:
            return p
        if up:
            return pingpong_switch(k+1, p+1, up)
        else:
            return pingpong_switch(k+1, p-1, up)

    def pingpong_switch(k, p, up):
        if k % 7 == 0 or has_seven(k):
            return pingpong_next(k, p, not up)
        else:
            return pingpong_next(k, p, up)

    return pingpong_next(1, 1, True)
</code></pre>

<h3 class="question" id="q4">Question 4</h3>

<p>Once the machines take over, the denomination of every coin will be a
power of two: 1-cent, 2-cent, 4-cent, 8-cent, 16-cent, etc.  There will
be no limit to how much a coin can be worth.</p>

<p>A set of coins makes change for <code>n</code> if the sum of the values of the
coins is <code>n</code>.  For example, the following sets make change for <code>7</code>:</p>

<ul>
  <li>7 1-cent coins</li>
  <li>5 1-cent, 1 2-cent coins</li>
  <li>3 1-cent, 2 2-cent coins</li>
  <li>3 1-cent, 1 4-cent coins</li>
  <li>1 1-cent, 3 2-cent coins</li>
  <li>1 1-cent, 1 2-cent, 1 4-cent coins</li>
</ul>

<p>Thus, there are 6 ways to make change for <code>7</code>.  Write a function
<code>count_change</code> that takes a positive integer <code>n</code> and returns the number
of ways to make change for <code>n</code> using these coins of the future:</p>

<pre><code>def count_change(amount):
    """Return the number of ways to make change for amount.

    &gt;&gt;&gt; count_change(7)
    6
    &gt;&gt;&gt; count_change(10)
    14
    &gt;&gt;&gt; count_change(20)
    60
    &gt;&gt;&gt; count_change(100)
    9828
    """
    def count_by_min_coin(amount, min_coin=1):
        if amount < min_coin:
            return 0
        if amount == min_coin:
            return 1
        with_min_coin = count_by_min_coin(amount-min_coin, min_coin)
        without_min_coin = count_by_min_coin(amount, 2*min_coin)
        return with_min_coin + without_min_coin

    return count_by_min_coin(amount)
</code></pre>

<h3 class="question" id="q5">Question 5</h3>

<p>A classic puzzle called the Towers of Hanoi is a game that consists of three
rods, and a number of disks of different sizes which can slide onto any rod.
The puzzle starts with <code>n</code> disks in a neat stack in ascending order of size on
a <code>start</code> rod, the smallest at the top, forming a conical shape.</p>

<p><img src="{{site.baseurl}}/img/cs61a/tower.jpg" alt="Towers of Hanoi"></p>

<p>The objective of the puzzle is to move the entire stack to an <code>end</code> rod,
obeying the following rules:</p>

<ul>
  <li>Only one disk may be moved at a time.</li>
  <li>Each move consists of taking the top (smallest) disk from one of the rods and
  sliding it onto another rod, on top of the other disks that may already be
  present on that rod.</li>
  <li>No disk may be placed on top of a smaller disk.</li>
</ul>

<p>Complete the definition of <code>towers_of_hanoi</code> which prints out the steps
to solve this puzzle for any number of <code>n</code> disks starting from the
<code>start</code> rod and moving them to the <code>end</code> rod:</p>

<pre><code>def towers_of_hanoi(n, start, end):
    """Print the moves required to solve the towers of hanoi game, starting
    with n disks on the start pole and finishing on the end pole.

    The game is to assumed to have 3 poles.

    &gt;&gt;&gt; towers_of_hanoi(1, 1, 3)
    Move the top disk from rod 1 to rod 3
    &gt;&gt;&gt; towers_of_hanoi(2, 1, 3)
    Move the top disk from rod 1 to rod 2
    Move the top disk from rod 1 to rod 3
    Move the top disk from rod 2 to rod 3
    &gt;&gt;&gt; towers_of_hanoi(3, 1, 3)
    Move the top disk from rod 1 to rod 3
    Move the top disk from rod 1 to rod 2
    Move the top disk from rod 3 to rod 2
    Move the top disk from rod 1 to rod 3
    Move the top disk from rod 2 to rod 1
    Move the top disk from rod 2 to rod 3
    Move the top disk from rod 1 to rod 3
    """
    assert 0 &lt; start &lt;= 3 and 0 &lt; end &lt;= 3 and start != end, "Bad start/end"
    if n == 1:
        print("Move the top disk from rod", start, "to rod", end)
    else:
        other = 6 - start - end
        towers_of_hanoi(n-1, start, other)
        towers_of_hanoi(1, start, end)
        towers_of_hanoi(n-1, other, end)
</code></pre>

<h3 class="question" id="q6">Question 6: Challenge Problem (optional)</h3>

<p>The recursive factorial function can be written as a single expression
by using a <a href="http://docs.python.org/py3k/reference/expressions.html#conditional-expressions">conditional expression</a>.</p>

<pre><code>&gt;&gt;&gt; fact = lambda n: 1 if n == 1 else mul(n, fact(sub(n, 1)))
&gt;&gt;&gt; fact(5)
120</code></pre>

<p>However, this implementation relies on the fact (no pun intended) that
<code>fact</code> has a name, to which we refer in the body of <code>fact</code>.  To write a
recursive function, we have always given it a name using a <code>def</code> or
assignment statement so that we can refer to the function within its
own body.  In this question, your job is to define fact recursively
without giving it a name!</p>

<p>Write an expression that computes <code>n</code> factorial using only call
expressions, conditional expressions, and lambda expressions (no
assignment or def statements).  <em>Note in particular that you are not
allowed to use <code>make_anonymous_factorial</code> in your return expression.</em>
The <code>sub</code> and <code>mul</code> functions from the <code>operator</code> module are the only
built-in function required to solve this problem:</p>

<pre><code>from operator import sub, mul

def make_anonymous_factorial():
    """Return the value of an expression that computes factorial.

    &gt;&gt;&gt; make_anonymous_factorial()(5)
    120
    """
    eturn (lambda f: lambda n: f(f, n))(lambda f, n: 1 if n == 1 else mul(n, f(f, sub(n, 1))))
</code></pre>
