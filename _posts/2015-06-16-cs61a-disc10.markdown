---
layout:     post
title: "CS61A-Discussion 10"
subtitle:   "Interpreters and tail calls"
author: "Tianxiang Gao"
date: "Jun 16, 2015"
header-img: "img/post-bg-02.jpg"
---
<h2>1 Iterators</h2>
An *Iterator* is an object that represents a sequence of values. Here is an example of a class that implement Python's iterator interface whose components are <code>__next__</code> and <code>__iter__</code> method.
<pre><code>class Natureals:
    """This iterator calculates all of the natural
    numbers one-by-one, starting from zero"""
    def __init__(self):
        self.current = 0
    def __next__(self):
        result = self.current
        self.current += 1
        return result
    def __iter__(self):
        return self</code></pre>

<h3>1.1 __next__</h3>
The <code>__next__</code> method usually does two things:

* calculates the next value
* checks if it has any values left to compute

When there are no more values left to compute, the <code>__next__</code> method must raise a type of exception called <code>StopIteration</code>. This signals the end of the sequence.

<h3>1.2 __iter__</h3>
The purpose of the <code>__iter__</code> method is to return an iterator object. By definition, an iterator object is an object that has implementd both the <code>__next__</code> and <code>__iter__</code> methods.

<h3>1.3 Implementation</h3>
When defining an iterator object, you should always keep track of how much of the sequence has already been computed. In the above example, we use an instance variable <code>self.current</code> to keep track.

<h3>1.4 Questions</h3>
<ol>
<li>Implement an iterator <code>IterCombiner</code></li>
<pre><code>class IterCombiner(object):
    """docstring for IterCombiner"""
    def __init__(self, iter1, iter2, combiner):
        self.iter1 = iter1
        self.iter2 = iter2
        self.combiner = combiner

    def __next__(self):
        result = self.combiner(next(self.iter1), next(self.iter2))
        return result
        
    def __iter__(self):
        return self</code></pre>

<li>What is the result of executing this sequence of commands?</li>
<pre><code>>>> naturals = Naturals()
>>> doubled_naturals = IterCombiner(naturals, naturals, add)
>>> next(doubled_naturals)
1
>>> next(doubled_naturals)
5</code></pre>
</ol>

<h3>1.5 Extra Practice</h3>
<ol>
<li>Create an iterator that generates the sequence of Fibonacci numbers.</li>
</ol>

<h2>2 Generators</h2>
A **generator** is a special *function* that uses a <code>yield</code> statement instead of a <code>return</code> statement to report values. When a generator function is called, it returns an iterable object. A generator object implicitly contains <code>__next__</code> method. This means, by definition, a generatr object is an *iterator*.

<h3>2.1 <code>yield</code></h3>
The <code>yield</code> statement is similar to <code>return</code> statement. However, while a <code>return</code> statement closes the current frame after the function exits, a yield statement causes the frame to be saved until the next time <code>__next__</code> is called, which allows the generator to automatically keep track of the iteration state.

Once <code>__next__</code> is called again, execution picks up from where the previously executed <code>yield</code> statement left off, and continues until the next <code>yield</code> statement (or the end of the function) is encountered.

Including a <code>yield</code> statement in a function automatically signals to Python that this function will create a generator. When we call the function, it will return a generator object, instead of executing the code inside the body. When the returned generator's <code>__next__</code> method is called, the code in the body is executed for the first time, and stops executing upon reaching the first <code>yield</code> statement.

<h3>2.2 Implementation</h3>
Because generators are technically iterators, you can implement <code>__iter__</code> methods using only generators.

<pre><code>class Naturals:
    """docstring for Naturals"""
    def __init__(self):
        self.current = 0
    def __iter__(self):
        while True:
            yield self.current
            self.current += 1</code></pre>
Naturals <code>__iter__</code> method now returns a generator object.

<h3>2.3 Questions</h3>
<ol>
<li>Define a generator that yields the sequence of perfect squares.</li>
<pre><code>def perfect_squares():
    num = 0
    while True:
        yield num ** 2
        num += 1</code></pre>
</ol>
<h3>2.4 Extr Practice</h3>
<ol>
<li>Write a generator function that returns lists of all subsets of the positive intergers from 1 to n.</li>
<pre><code>def generate_subsets():
    """
    >>> subsets = generate_subsets()
    >>> next(subsets)
    [[]]
    >>> next(subsets)
    [[], [1]]
    >>> next(subsets)
    [[], [1], [2], [1, 2]]
    """
    subsets = [[]]
    num = 1
    while True:
        yield subsets
        subsets += [s + [num] for s in subsets]
        num += 1</code></pre>
</ol>

<h2>3 Streams</h2>
A *steam* is a lazily-evaluated linked list. A stream's elements (except for the first element) are only computed when those values are needed.

<pre><code>class Stream:
    """docstring for Stream"""
    def __init__(self):
        class empty:
            """docstring for empty"""
            def __str__(self):
                return "Stream.empty"
        empty = empty()
    def __init__(self, first, computer_rest=lambda: Stream.empty):
        assert callable(computer_rest), 'must be a function'
        self.first = first
        self._computer_rest = computer_rest
    @property
    def rest(self):
        """Return the rest , computing it if necessary."""
        if self._computer_rest is not None:
            self._rest = self._computer_rest()
            self._computer_rest = None
        return self._rest</code></pre>

A <code>Stream</code> instance is similar to a <code>Link</code> instance. Both have <code>first</code> and <code>rest</code> attributes. The rest of a <code>Link</code> is either a <code>Link</code> or <code>Link.empty</code>. Likewise, the rest of a <code>Stream</code> is either a <code>Stream</code> or <code>Stream.empty</code>.

However, instead of specifiying all of the elemnts in <code>__init__</code>, we provide a function, <code>compute_rest</code>, that will be called to compute the remaining elements of the stream. Remeber that the code in the function body is not evaluated unitil it is called, which lets us implement the desired evaluation behavior.

This implementation of streams also uses <code>memoization</code>. The first time a program asks a <code>Stream</code> for its rest field, the <code>Stream</code> code computes the required value using <code>compute_rest</code>, saves the resulting value, and then returns it. After that, every time the <code>rest</code> field is referenced, the stored value is simply returned.

Here is an example.

<pre><code>def make_integer_stream(first=1):
    def compute_rest(): # last
        return make_integer_stream(first+1)
    return Stream(first, compute_rest)</code></pre>

Here, we start out with a stream whose first element is 1, and whose <code>compute_rest</code> function creates another stream. So when we do compute the <code>rest</code>, we get another stream whose first element is one greater than the previouse element, and whose <code>compute_rest</code> creates another stream. Hence, we effectively get an infinite stream of integers, computed one at a time. This is almost like an infinite recursion, but one which can be viewed one step at a tie, and so does not crash.

<h3>3.1 Questions</h3>
<ol>
<li>implement a random infinite stream consists of a first random number, followed by a remaining random infinite stream.</li>
<pre><code>from random import random
random_stream = Stream(random(), lambda: random_stream)</code></pre>
The provided code willgenerate a single random number, and then the infinite stream will repeat that number over and over.
<pre><code>from random import random
def random_stream():
    return Stream(random(), random_stream)</code></pre>

<li>implement <code>every_other</code></li>
<pre><code>def every_other(s):
    def compute_rest():
        return every_other(s.rest.rest)
    return Stream(s.first, compute_rest)</code></pre>
</ol>

<h3>3.2 Extra Questions</h3>
<ol>
<li>Implement <code>fib_stream</code></li>
<pre><code>def fib_stream():
    return fib_stream_helper()

def fib_stream_helper(pre=0, curr=1):
    def compute_rest():
        return fib_stream_helper(curr, pre+curr)
    return Stream(pre, compute_rest)</code></pre>
<li>Implemen <code>seventh</code></li>
<pre><code>def seventh(n):
    q, r = n*10 // 7, n*10 % 7
    return Stream(q, lambda: seventh(r))</code></pre>
</ol>

<h3>3.3 Higher-Order Functions on Streams</h3>
<pre><code>def filter_stream(filter_function, s):
    def compute_rest():
        return filter_stream(filter_function, s.rest)

    if s is Stream.empty:
        return s
    elif filter_function(s.first):
        return Stream(s.first, compute_rest)
    else:
        return compute_rest</code></pre>
The Stream we create has as its <code>compute_rest</code> a function that "promises" to filter the rest of the Stream when called. So at any one point, the entire stream has not been filtered. Instead, only the part that has been referenced has been filtered.

<h3>3.4 Questions</h3>
<ol>
<li>What does the following stream output?</li>
<pre><code>def my_stream():
    def compute_rest():
        return add_streams(map_stream(double, my_stream()), my_stream())
    return Stream(1, compute_rest)</code></pre>
1, 3, 9, 27, 81, ...
<li>What are the first five values in the following stream?</li>
<pre><code>def my_stream2():
    def compute_rest():
        return add_streams(filter_stream(lambda x: x % 2 ==0, my_stream2()), 
                           map_stream(lambda x: x + 2, my_stream2()))
        return Stream(2, compute_rest)</code></pre>
2, 6, 14, 30, 62, ...
</ol>