---
layout:     post
title: "CS61A-Lab 6"
subtitle:   "Object-Oriented Programming and Inheritance"
author: "Tianxiang Gao"
date: "May 26, 2015"
header-img: "img/post-bg-02.jpg"
---
<h1>Object-Oriented Programming</h1>
<hr>
<h2>Introduction</h2>

<pre><code>class Car(objecct):
    num_wheels = 4

    def __init__(self, color):
        self.wheels = Car.num_wheels
        self.color = color

    def drive(self):
        if self.wheels <= Car.num_wheels:
            return self.color + ' car cannot drive!'
        return self.color + ' car goes vroom!'

    def pop_tire(self):
        if self.wheels > 0:
            self.wheels -= 1
</code></pre>

* **class**: a blueprint for how to build a certain type of object. In example, <code>Car</code>.
* **instance**: a particular occurrence of a class. <br> <code>my_car = Car('red')</code>
* **attribute** or **field**: a variable that belongs to the class. Think of an attribute as a *quality* of the object. We can access attributes using **dot notation**.
* **method**: Mthods are just like normal functions, except that they are tied to an instance or a class. Think of a method as a "verb" of a class: cars can *drive* and also *pop their tires*. We can call methods using **dot notation**.
* **constructor**: As with data abstraction, constructors describe how to build an instance of the class. Most classes have a constructor. In Python, the constructor of the class defined as <code>__init__</code>.
* <code>self</code>: in Python, <code>self</code> is the first parameter for many methods. When a method is called, <code>self</code> is bound to an instance of the class. The dot notation **implicitly** passes in instance as <code>self</code> for us.

<h3>Types of variables</h3>
* **local variable**: These are just like the variables you see in normal functions - once the function or method is done being called, this variable is no longer able to be accessed. 
* **instance attribute**: Unlike local variables, instance attributes will still be accessible after method calls have finished. Each instance of a class keeps its own version of the instance attribute.
* **class attribute**: As with instance attributes, class attributes also persist across method calls. However, unlike instance attributes, all instances of a class will share the same class attributes.

<h3>Question 1</h3>
<pre><code>>>> class Account(object):
...     interest = 0.02
...     def __init__(self, account_holder):
...         self.balance = 0
...         self.holder = account_holder
...     def deposit(self, amount):
...         self.balance = self.balance + amount
...         print("Yes!")
...
>>> a = Account("Billy")
>>> a.account_holder
AttributeError: 'Account' object has no attribute 'account_holder'

>>> a.holder
'Billy'

>>> Account.holder
AttributeError: type object 'Account' has no attribute 'holder'

>>> Account.interest
0.02

>>> a.interest
0.02

>>> Account.interest = 0.03
>>> a.interest
0.03

>>> a.deposit(1000)
'Yes!'

>>> a.balance
1000

>>> a.interest = 9001
>>> Account.interest
0.03
</code></pre>

<h3>Question 2</h3>
<pre><code>class Person(object):
    """Person class.

    >>> steven = Person("Steven")
    >>> steven.repeat()       # starts at whatever value you'd like
    'I squirreled it away before it could catch on fire.'
    >>> steven.say("Hello")
    'Hello'
    >>> steven.repeat()
    'Hello'
    >>> steven.greet()
    'Hello, my name is Steven'
    >>> steven.repeat()
    'Hello, my name is Steven'
    >>> steven.ask("preserve abstraction barriers")
    'Would you please preserve abstraction barriers'
    >>> steven.repeat()
    'Would you please preserve abstraction barriers'
    """
    def __init__(self, name):
        self.name = name
        self.last = 'I squirreled it away before it could catch on fire.'

    def say(self, stuff):
        self.last = stuff
        return stuff

    def ask(self, stuff):
        return self.say("Would you please " + stuff)

    def greet(self):
        return self.say("Hello, my name is " + self.name)

    def repeat(self):
        return self.last
</code></pre>

<h3>Question 3</h3>
<pre><code>class Account(object):
    """A bank account that allows deposits and withdrawals.

    >>> eric_account = Account('Eric')
    >>> eric_account.deposit(1000000)   # depositing my paycheck for the week
    1000000
    >>> eric_account.transactions
    [('deposit', 1000000)]
    >>> eric_account.withdraw(100)      # buying dinner
    999900
    >>> eric_account.transactions
    [('deposit', 1000000), ('withdraw', 100)]
    """

    interest = 0.02

    def __init__(self, account_holder):
        self.balance = 0
        self.holder = account_holder
        self.transactions = []

    def deposit(self, amount):
        """Increase the account balance by amount and return the
        new balance.
        """
        self.transactions.append(('deposit', amount))
        self.balance = self.balance + amount
        return self.balance

    def withdraw(self, amount):
        """Decrease the account balance by amount and return the
        new balance.
        """
        if amount > self.balance:
            return 'Insufficient funds'
        self.transactions.append(('withdraw', amount))
        self.balance = self.balance - amount
        return self.balance</code></pre>

<h2>Property Decorator</h2>
<code>@property</code> decorator allows us to call a *zero-argument method* without adding parentheses, instead, like an instance attribute.

<h3>Question 4</h3>
<pre><code>class BadBankAccount(Account):
    """ A subclass of bank account that allows an account holder to overdraw
    once, and then prevents them from withdrawing more money. You should also
    implement the property method overdrawn, which allows an account holder to
    check if they are overdrawn.

    >>> harold_account = BadBankAccount('Harold')
    >>> harold_account.deposit(100)   # depositing my paycheck for the week
    100
    >>> harold_account.withdraw(101)  # buying dinner
    -1
    >>> harold_account.overdrawn
    True
    >>> harold_account.withdraw(100000)
    You have overdrawn, please add more money!
    -1
    >>> harold_account.deposit(10)
    9
    >>> harold_account.overdrawn
    False
    """

    def withdraw(self, amount):
        """Decrease the account balance by amount and return the
        new balance.
        """
        if self.balance < 0:
            print('You have overdrawn, please add more money!')
            return self.balance
        self.balance = self.balance - amount
        return self.balance

    @property
    def overdrawn(self):
        return self.balance < 0</code></pre>

<h2>Inheritance</h2>
<hr>
<h3>Question 5</h3>
<pre><code>>>> class Account(object):
...     interest = 0.02
...     def __init__(self, account_holder):
...         self.balance = 0
...         self.holder = account_holder
...     def deposit(self, amount):
...         self.balance = self.balance + amount
...         print("Yes!")
...
>>> class CheckingAccount(Account):
...     def __init__(self, account_holder):
...         Account.__init__(self, account_holder)
...     def deposit(self, amount):
...         Account.deposit(self, amount)
...         print("Have a nice day!")
...
>>> a = Account("Billy")
>>> a.balance
0

>>> c = CheckingAccount("Eric")
>>> c.balance
0

>>> a.deposit(30)
'Yes!'

>>> c.deposit(30)
'Yes!'
'Have a nice day!'

>>> c.interest
0.02

</code></pre>

<h3>Question 6</h3>
<pre><code>class DoubleTalker(Person):
    def __init__(self, name):
        Person.__init__(self, name)
    def say(self, stuff):
        return Person.say(self, stuff) + " " + self.repeat()

class DoubleTalker(Person):
    def __init__(self, name):
        Person.__init__(self, name)
    def say(self, stuff):
        return stuff + " " + stuff

class DoubleTalker(Person):
    def __init__(self, name):
        Person.__init__(self, name)
    def say(self, stuff):
        return Person.say(self, stuff + " " + stuff)</code></pre>

Last one works as intended. For the fist and second, <code>repeat</code> method would fail.

<h3>Question 7</h3>
<pre><code>class CheckingAccount(Account):
    """A bank account that charges for withdrawals.

    >>> check = Check("Steven", 42)  # 42 dollars, payable to Steven
    >>> steven_account = CheckingAccount("Steven")
    >>> eric_account = CheckingAccount("Eric")
    >>> eric_account.deposit_check(check)  # trying to steal steven's money
    The police have been notified.
    >>> eric_account.balance
    0
    >>> check.deposited
    False
    >>> steven_account.balance
    0
    >>> steven_account.deposit_check(check)
    42
    >>> check.deposited
    True
    >>> steven_account.deposit_check(check)  # can't cash check twice
    The police have been notified.
    """
    withdraw_fee = 1
    interest = 0.01

    def withdraw(self, amount):
        return Account.withdraw(self, amount + self.withdraw_fee)
    def deposit_check(self, check):
        if check.payable_to == self.holder and check.amount > 0:
            self.deposit(check.amount)
            check.amount = 0
            check.deposited = True
            return self.balance
        else:
            return 'The police have been notified.'

class Check(object):
    def __init__(self, payable_to, amount):
        self.payable_to = payable_to
        self.amount = amount
        self.deposited = False</code></pre>

<h3>Question 8</h3>
<pre><code>class Keyboard:
    """A Keyboard takes in an arbitrary amount of buttons, and has a
    dictionary of positions as keys, and values as Buttons.

    >>> b1 = Button(0, "H")
    >>> b2 = Button(1, "I")
    >>> k = Keyboard(b1, b2)
    >>> k.buttons[0].key
    'H'
    >>> k.press(1)
    'I'
    >>> k.typing([0, 1])
    'HI'
    >>> k.typing([1, 0])
    'IH'
    >>> b1.pressed
    2
    >>> b2.pressed
    3
    """

    def __init__(self, *args):
        self.buttons = {b.pos: b for b in args}

    def press(self, info):
        """Takes in a position of the button pressed, and
        returns that button's output"""
        if info in self.buttons.keys():
            self.buttons[info].pressed += 1
            return self.buttons[info].key
        return ''

    def typing(self, typing_input):
        """Takes in a list of positions of buttons pressed, and
        returns the total output"""
        accumulate = ''
        for pos in typing_input:
            accumulate+=self.press(pos)
        return accumulate
        


class Button:
    def __init__(self, pos, key):
        self.pos = pos
        self.key = key
        self.pressed = 0
</code></pre>