---
layout:     post
title: "CS61A-Lab 4"
subtitle:   "Lists"
author: "Tianxiang Gao"
date: "May 14, 2015"
header-img: "img/post-bg-02.jpg"
---
Lists
----------------------
<h3>Question 1: What would Python print? List indexing</h3> 

<pre><code>>>> x = [1, 2, 3]
>>> x[0]
1

>>> x[x[0]]
2

>>> x[x[x[0]]]
3

>>> x[3]
IndexError

>>> x[-1]
3

>>> x[-3]
1
</code></pre>

<h3>Question 2: What would Python print? List slicing</h3>
<pre><code>>>> x = [1, 2, 3, 4]
>>> x[1:3]
[2, 3, 4]

>>> x[:2]
[1, 2]

>>> x[1:]
[2, 3, 4]

>>> x[-2:3]
[3]
</code></pre>

<h3>Question 3: What would Python print? List operations</h3>
<pre><code>
>>> y = [1]
>>> len(y)
1

>>> 1 in y
True

>>> y + [2, 3]
[1, 2, 3]

>>> [0] + y
[0, 1]

>>> y * 3
[1, 1, 1]

>>> z = [[1, 2], [3, 4, 5]]
>>> len(z)
2
</code></pre>

<h3>Question 4: Fill in the blanks</h3>
<pre><code>def get_seven_a(x):
    """
    >>> x = [1, 3, [5, 7], 9]
    >>> get_seven_a(x)
    7
    """
    return x[2][1]

def get_seven_b(x):
    """
    >>> x = [[7]]
    >>> get_seven_b(x)
    7
    """
    return x[0][0]

def get_seven_c(x):
    """
    >>> x = [1, [2, [3, [4, [5, [6, [7]]]]]]]
    >>> get_seven_c(x)
    7
    """
    return x[1][1][1][1][1][1][0]</code></pre>

<h3>Question 5: Reverse (recursively)</h3>
<pre><code>def reverse_recursive(lst):
    """Returns the reverse of the given list.

    >>> reverse_recursive([1, 2, 3, 4])
    [4, 3, 2, 1]
    """
    if not lst:
        return []
    return reverse_recursive(lst[1:]) + [lst[0]]
</code></pre>

<h3>Question 6: Merge</h3>
<pre><code>def merge(lst1, lst2):
    """Merges two sorted lists recursively.

    >>> merge([1, 3, 5], [2, 4, 6])
    [1, 2, 3, 4, 5, 6]
    >>> merge([], [2, 4, 6])
    [2, 4, 6]
    >>> merge([1, 2, 3], [])
    [1, 2, 3]
    >>> merge([5, 7], [2, 4, 6])
    [2, 4, 5, 6, 7]
    """
    if not lst1 or not lst2:
        return lst1 + lst2
    elif lst1[0] < lst2[0]:
        return [lst1[0]] + merge(lst1[1:], lst2)
    else:
        return [lst2[0]] + merge(lst1, lst2[1:])</code></pre>

List Comprehensions
-------------------
List comprehensions are a compact and powerful way of creating new lists out of sequences. Let's work with them directly:
<pre><code>>>> [i**2 for i in [1, 2, 3, 4] if i%2 == 0]
[4, 16]
</code></pre>
The general syntax for a list comprehension is 
<pre><code>[&lt;expression&gt; for &lt;element&gt; in &lt;sequence&gt; if &lt;conditional&gt;]</code></pre>

The syntax is designed to read like English: "Compute the expression
for each element in the sequence if the conditional is true."

<h3>Question 7: What Would Python Print?</h3> 

<pre><code>>>> [x*x for x in range(5)]
[0, 1, 4, 9, 16]

>>> [n for n in range(10) if n % 2 == 0]
[0, 2, 4, 6, 8]

>>> ones = [1 for i in ["hi", "bye", "you"]]
>>> ones + [str(i) for i in [6, 3, 8, 4]]
[1, 1, 1, '6', '3', '8', '4']

>>> [i+5 for i in [n for n in range(1,4)]]
[6, 7, 8]
</code></pre>

<h3>Question 8: Perfect squares</h3>
<pre><code>from math import sqrt

def is_square(n):
    return float(sqrt(n)) == int(sqrt(n))

def squares(seq):
    """Returns a new list containing elements of the original list that are
    perfect squares.

    >>> seq = [49, 8, 2, 1, 102]
    >>> squares(seq)
    [49, 1]
    >>> seq = [500, 30]
    >>> squares(seq)
    []
    """
    return [ i for i in seq if is_square(i)]
</code></pre>

Extra Questions
---------------
<h3>Question 9: Reverse (iteratively)</h3>
<pre><code>def reverse_iter(lst):
    """Returns the reverse of the given list.

    >>> reverse_iter([1, 2, 3, 4])
    [4, 3, 2, 1]
    """
    result = []
    for i in range(len(lst)):
        result = [lst[i]] + result
    return result
</code></pre>

<h3>Question 10: Mergesort</h3>
<pre><code>def mergesort(seq):
    """Mergesort algorithm.

    >>> mergesort([4, 2, 5, 2, 1])
    [1, 2, 2, 4, 5]
    >>> mergesort([])     # sorting an empty list
    []
    >>> mergesort([1])   # sorting a one-element list
    [1]
    """
    if len(seq) < 2:
        return seq
    else:
        left, right = seq[:len(seq)//2], seq[len(seq)//2:]
        return merge(mergesort(left), mergesort(right))
</code></pre>

<h3>Question 11: Coordinates</h3>
<pre><code>def coords(fn, seq, lower, upper):
    """
    >>> seq = [-4, -2, 0, 1, 3]
    >>> fn = lambda x: x**2
    >>> coords(fn, seq, 1, 9)
    [[-2, 4], [1, 1], [3, 9]]
    """ 
    return [[x, fn(x)] for x in seq if fn(x)>= lower and fn(x) <= upper]

</code></pre>

<h3>Question 12: Deck of cards</h3>

<pre><code>def deck(suits, numbers):
    """Creates a deck of cards (a list of 2-element lists) with the given
    suits and numbers. Each element in the returned list should be of the form
    [suit, number].

    >>> deck(['S', 'C'], [1, 2, 3])
    [['S', 1], ['S', 2], ['S', 3], ['C', 1], ['C', 2], ['C', 3]]
    >>> deck(['S', 'C'], [3, 2, 1])
    [['S', 3], ['S', 2], ['S', 1], ['C', 3], ['C', 2], ['C', 1]]
    >>> deck([], [3, 2, 1])
    []
    >>> deck(['S', 'C'], [])
    []
    """
    return [[s, n] for s in suits for n in numbers]
</code></pre>

<h3>Question 13: Adding matrices</h3>
<pre><code>def lambda_curry2(func):
    """
    Returns a Curried version of a two argument function func.
    >>> from operator import add
    >>> x = lambda_curry2(add)
    >>> y = x(3)
    >>> y(5)
    8
    """
    return lambda x: lambda y: func(x, y)
</code></pre>

<h3>Question 11: Community</h3>
<pre><code>>>> def troy():
...     abed = 0
...     while abed < 10:
...         britta = lambda: abed
...         abed += 1
...     abed = 20
...     return britta
...
>>> jeff = troy()
>>> shirley = lambda : jeff
>>> pierce = shirley()
>>> pierce()
20
</code></pre>
<img src="{{site.baseurl}}/img/cs61a/lab03-q11.jpg" style="width:710px">

<h3>Question 12: Insect Combinatorics</h3>
<pre><code>def paths(m, n):
    """Return the number of paths from one corner of an
    M by N grid to the opposite corner.

    >>> paths(2, 2)
    2
    >>> paths(5, 7)
    210
    >>> paths(117, 1)
    1
    >>> paths(1, 157)
    1
    """
    if m == 1 or n == 1:
        return 1
    return paths(m - 1, n) + paths(m, n - 1)
</code></pre>

<h3>Question 13: GCD</h3>
<pre><code>def add_matrices(x, y):
    """
    >>> matrix1 = [[1, 3],
    ...            [2, 0]]
    >>> matrix2 = [[-3, 0],
    ...            [1, 2]]
    >>> add_matrices(matrix1, matrix2)
    [[-2, 3], [3, 2]]
    """
    return [[x[i][j] + y[i][j] for j in range(len(x[i]))] for i in range(len(x))]

</code></pre>

