---
layout:     post
title: "CS61A-Discussion 01"
subtitle:   "Control, and higher order functions"
author: "Tianxiang Gao"
date: "May 08, 2015"
header-img: "img/post-bg-02.jpg"
---
1 Control
----------
<h3>1.1 Conditional Statements</h3>
**if-elif-else**
<pre><code>if &lt;conditional expression&gt;:
    &lt;suite of statements&gt;
elif &lt;conditional expression&gt;:
    &lt;suite of statements&gt;
else:
    &lt;suite of statements&gt;</code></pre>
Note that <code>False</code>, <code>0</code>, <code>None</code> are **false values**.

<h3>1.2 Iteration</h3>
**while loop**
<pre><code>while &lt;conditional clause&gt;:
    &lt;body of statements&gt;
</code></pre>

<h3>1.3 Questions</h3>
<pre><code>def is_prime(n):
    if n <= 1:
        return False
    k = 2
    while k < n:
        if n % k == 0:
            return False
        k = k + 1
    return True
</code></pre>

<h3>1.4 Extra Questions</h3>
1. Choose $k$ items from $n$ items.

<pre><code>def choose(n, k):
    """Returns the number of ways to choose K items from N items.
    >>> choose(5, 2)
    10
    >>> choose(20, 6)
    38760
    """
    i = 1
    total = 1
    while i < k:
        total = total * (n - i) // (i + 1)
        i = i + 1
    return total

</code></pre>

Higher Order Functions
----------------------
<h3>2.1 Functions as Argument Values</h3>
<pre><code>def square(x):
    return x * x
    def square_ints(n):
    """Print out the square of every integer from 1 to n.
    >>> square_ints(3)
    1
    4
    9
    """
    k = 1
    while k <= n
        print(square(k))
        k += 1
</code></pre>
<pre><col>def double(x):
    return 2 * x
    def double_ints(n):
    """Print out the double of every integer from 1 to n.
    >>> double_ints(3)
    2
    4
    6
    """
    k = 1
    while k <= n:
        print(double(k))
        k = k + 1
</col></pre>

<h3>2.2 Questions</h3>
1. Implement <code>transform_ints</code>
<pre><code>def transform_ints(f, n):
    """Print out all integers from 1 to n with func applied
    on them.
    >>> def square(x):
    ... return x * x
    >>> transform_ints(square, 3)
    1
    4
    9
    """
    k = 1
    while k <= n:
        print(f(k))
        k = k + 1

</code></pre>

<h3>2.3 Functions as Return Values</h3>
<pre><code>def outer(x):
    def inner(y):
        ...
    return inner

</code></pre>

<h3>2.4 Questions</h3>
<ol>
<li><code>and_add</code></li>
<pre><code>def and_add(f, n):
    """Return a new function. This new function takes an
    argument x and returns f(x) + n.
    >>> def square(x):
    ...     return x * x
    >>> new_square = and_add(square, 3)
    >>> new_square(4) # 4 * 4 + 3
    19
    """
    def g(x):
        return f(x) + n
    return g

</code></pre>
<li>Draw the environment diagram that results from running the following code:</li>
<pre><code>n = 7
def f(x):
    n = 8
    return x + 1

def g(x):
    n = 9
    def h():
        return x + 1
    return h

def f(f, x):
    return f(x + n)()

m = f(g, n)
</code></pre>
<img src="{{site.baseurl}}/img/cs61a/disc01-24-2.jpg" style="width:710px">
</ol>

<h3>2.5 Extra Questions</h3>
<ol>
<li>Implement a function <code>keep_ints</code></li>
<pre><code>def keep_ints(cond, n):
    """Print out all integers 1..i..n where cond(i) is true
    >>> def is_even(x):
    ... # Even numbers have remainder 0 when divided by 2.
    ... return x % 2 == 0
    >>> keep_ints(is_even, 5)
    2
    4
    """
    i = 1
    while i <= n
        if cond(i):
            print(i)
        i += 1
</code></pre>
<li>The following code has been loaded into the Python interpreter:</li>
<pre><code>def skipped(f):
    def g():
        return f
    return g
def composed(f, g):
    def h(x):
        return f(g(x))
    return h
def added(f, g):
    def h(x):
        return f(x) + g(x)
    return h
def square(x):
    return x*x
def two(x):
    return 2
</code></pre>
What will Python output when the following lines are evaluated?
<pre><code>>>> composed(square, two)(7)
4 # square(two(7))
>>> skipped(added(square, two))()(3)
11 # square(3) + two(3)
>>> composed(two, square)(2)
2 # two(square(2))
</code></pre>
<li>Draw the environment diagram for the following code:</li>
<pre><code>from operator import add
def curry2(h):
    def f(x):
        def g(y):
            return h(x, y)
        return g
    return f

make_adder = curry2(add)
add_three = make_adder(3)
five = add_three(2)
</code></pre>
<img src="{{site.baseurl}}/img/cs61a/disc01-25-3.jpg" style="width:710px">
</ol>

3 Addendum: Environment Diagrams
--------------------------------
<h3>3.1 Questions</h3>
<ol>
<li>Draw the environment diagram that results from running the following code</li>
<pre><code>a = 1
def b(b):
    return a + b
a = b(a)
a = b(a)
</code></pre>
<img src="{{site.baseurl}}/img/cs61a/disc01-31-1.jpg" style="width:710px">
<li>Draw the environment diagram that results from executing the code below.</li>
<img src="{{site.baseurl}}/img/cs61a/disc01-31-2.jpg" style="width:710px">
</ol>

<h3>3.2 Extra Questions</h3>
* Draw the environment diagram that results from executing the code below.
<pre><code>from operator import add, mul
six = 2
def ty(one, a):
    spring = one(a, six)
    return spring

def fif(teen):
    return teen ** 2

six = ty(add, mul(six, six))
spring = fif(six)
</code></pre>
<img src="{{site.baseurl}}/img/cs61a/disc01-32-1.jpg" style="width:710px">











